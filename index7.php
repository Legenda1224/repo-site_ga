<!Doctype html>
<html>
<head>
	<link rel="stylesheet" type="text/css" href="./css/stylePython.css">
	<title>Web-сайт</title>
	<meta charset="UTF-8">
</head>
<body>
<?php require "document/header7.php" ?>
<div class="fonk">
	<h2>Python</h2>
	
		<p class="text_t">Python-высокоуровневый язык программирования общего назначения, ориентированный на повышение производительности разработчика и читаемости кода, а также на обеспечение переносимости написанных на нём программ. Синтаксис ядра Python минималистичен и направлен на написание качественных приложений, за счёт чего на практике редко возникает необходимость обращаться к документации. Стандартная библиотека включает большой набор полезных переносимых функций, начиная от функционала для работы с текстом и заканчивая средствами для написания сетевых приложений. Недостатком языка является зачастую более низкая скорость работы написанных на нём программ по сравнению с аналогичным кодом, написанным на Си или C++.</p>
	<img id="img" src="./img/max_g480_c12_r16x9_pd10.webp">
	
	<h3>Кто создал Python</h3>
		<p class="text_tt">Питон был задуман в еще в далеких 80 — х программистом из Голландии Гвидо ван Россумом. Создавать его Гвидо начал в 1989 году как замену языку ABC, предназначенного для обучения студентов программированию. Он создавался на энтузиазме, без бюджета и поддержки.</p>
	<img id="img" src="./img/High-5_2-1024x683.jpg">
		<p class="text_tt">Работал Гвидо ван Россум по вечерам и в выходные дни. В результате за несколько недель был написан интерпретатор Python. Многие идеи были взяты из других языков программирования таких как C и ABC. В итоге из этого проекта вырос Python, входящий в тройку самых популярных языков мира.</p>
	<h3>Этапы развития Python</h3>
		<p class="text_tt">Публикация исходного текста Python произошла в 1991 году. Язык был относительно несложным. В нем было мало функций и интерпретатор «interpreter» тоже был небольшого размера.</p>
		
		<p class="text_tt">Всего было 3 версии питона:</p>
		
	<ol class="text_tt">
		<li>Первая версия Python 1.0 увидела свет в январе 1994 года и развитие ее релизов продолжалось до 2000 года. Последним релизом стал Python 1.6.</li>
	
		<li>С 2000 по 2008 год развивалась его вторая версия. В это время проект был помещен на SourseForge. Это платформа, на которой расположены проекты с открытым кодом и был дан импульс к развитию языка сообществом программистов.</li>
	
		<li>В 2008 году вышла третья версия, которая развивается и в настоящее время. Поддержка второй версии постепенно прекращается и все большее число программистов пользуется третьей версией Python. На момент выхода статьи последней версией питона является Python 3.9.0. Третья версия языка осуществляет поддержку второй не полностью.</li>
	</ol>
	
	<h3>Как работает Python</h3>
		<p class="text_tt">После того, как написан код, должна произойти его обработка интерпретатором Python. Что такое обработка?</p>
	<img id="img" src="./img/max_g480_c12_r16x9_pd10.jpg">
		<P class="text_tt">Для этого интерпретатор должен быть установлен на вашем компьютере. В целом обработка кода происходит в четыре этапа:</p>
	
		<ol class="text_tt">
			<li>Программа читается парсером и происходит анализ лексики. Где parser – это анализатор синтаксиса. В итоге получается набор лексем для дальнейшей обработки.</li>
	
			<li>Затем парсером из инструкций происходит генерация структуры и формирования дерева синтаксического разбора — AST.</li>
	
			<li>После этого компилятор преобразует AST в байт-код и отдает его на выполнение интерпретатору.</li>
			
			<li>Интерпретатор построчно исполняет все переданные ему инструкции.</li>
	</ol>
		
	
		
		<p class="italic">Программу в питоне часто называют скрипт или сценарий.</p>
		
		<p class="text_tt">Всю информацию по обработке кода можно найти в документации Python в открытом доступе.</p>
		
	<h3>Синтаксис питона</h3>
		<p class="text_tt">Для того, чтобы было удобнее работать программистам с языком Python был придуман достаточно простой синтаксис. Приведу основные принципы.</p>
		
		<ul class="text_tt">
			<li>Конец строки обозначает завершение инструкции. Не нужно специально обозначать точкой с запятой или какими — то другими символами;</li>
	
			<li>Для того, чтобы отделить вложенные блоки друг от друга, используется отступ при помощи табуляции. Как правило, это четыре пробела;</li>
	
			<li>Основная инструкция заканчивается двоеточием. После нее под строкой располагается вложенная инструкция или блок с отступом в четыре пробела</li>
		</ul>
		<p class="text_tt">Есть еще некоторые специальные случаи, которые лучше рассмотреть отдельно.</p>
	<h3>В питоне всего семь типов операторов:</h3>
		
		<ol class="text_tt">
			<li>Арифметические: сложение «+», вычитание «-», умножение «», деление «/», возведение в степень «*», деление без остатка «//», остаток от деления «%»;</li><br>
	
			<li>Сравнения: меньше «<», больше «>», меньше или равно «< =», больше или равно «> =», равно «= =», не равно «! =»;</li><br>
	
			<li>Присваивания: просто присваивание «=», сложение и присваивание «+=», вычитание и присваивание «- =», деление и присваивание «/=», умножение и присваивание «=», деление по модулю и присваивание «%=», возведение в степень и присваивание «*=», деление без остатка и присваивание «//=»;</li><br>
			
			<li>Логические: и «and», или «or», не «not»;</li><br>
			
			<li>Принадлежности: «в» «in» — принадлежит ли значение последовательности, «нет в» «not in» — не принадлежит ли значение последовательности;</li><br>
			
			<li>Тождественности т.е. происходит проверка являются операнды одинаковыми или нет. «Это» «is» — при тождественности операндов возвращается «Истина», иначе возвращается «Ложь». «Это не» «is not» — в этом случае наоборот если операнды не тождественны вернется «Истина», тождественны – «Ложь»;</li><br>
			
			<li>Битовые они исполняют побитовую операцию или, можно сказать, производят работу над операндами бит за битом. Бинарное «И» «&», бинарное «ИЛИ» «», бинарное «ИЛИ НЕТ» «^», инвертирующий оператор (~), бинарный сдвиг влево «<<», бинарный сдвиг вправо «>>».</li>
		</ol>
		
	<h3>А как насчет разработки игр?</h3>
		<p class="text_tt">	Вы можете использовать библиотеку PyGame
		для разработки игр, однако на практике ей пользуются не так уж
		часто. PyGame подойдет, если вы занимаетесь разработкой игр в качестве
		хобби или для создания небольшого проекта. Лично я бы не стал разрабатывать 
		серьезный проект на ее основе.<br></br>

		Скорее, я бы рекомендовал вам начать с Unity на языке С.
		Движок Unityявляется одним из самых популярных игровых движков 
		в мире — это позволяет вам создавать игры для всех основных платформ, 
		включая Mac, Windows, iOS и Android.


	<h3>А как насчет разработки игр?</h3>
		<p class="text_tt">	Вы можете писать приложения на Python для 
		ПК, используя библиотеку Tkinter, однако это не самый популярный способ.<br></br>

		На сегодняшний день, для написания приложений для ПК, гораздо 
		чаще используют такие языки, как  Java, C, C++ .Совсем недавно,
		некоторые компании начали использовать JavaScript в качестве основного языка разработки..<br><br>
		
		Например, настольное приложение Slack было создано с помощью фреймворка
		Electron — который позволяет разрабатывать нативные графические приложения
		для настольных операционных систем с помощью веб-технологий.<br></br>
		
		Если бы мне пришлось писать приложение для ПК, то лично я бы использовал JavaScript — это 
		позволило бы мне повторно использовать код из веб-версии. Тем не менее, я не специалист
		в разработке настольных приложений.<br></br>
		
	<h3>Разница между back-end и front-end кодом (на тот случай, если вы не можете в этом разобраться):</h3>
		<p class="text_tt">Предположим, вы хотите создать свой собственный проект — что-то вроде Instagram.<br><br>

							Сначала, вам придется написать frontend код для каждого типа устройств 
							и ОС, которые вы будете поддерживать. Для этого вы можете использовать, например:</p>
	<ul  class="text_tt">
		<li>Swift для iOS</li>
		<li>Java для Android</li>
		<li>JavaScript для веб-браузеров</li>
	</ul>
	
		<p class="text_tt">Каждый из наборов кода будет использоваться 
		в зависимости от используемого устройства или браузера.
		Он будет определять компоновку дизайна, как должны выглядеть 
		кнопки при нажатии на них и т. д. То есть front-end код будет
		определять все, что касается графического интерфейса приложения.<br><br>

		Затем вам нужно позаботиться о возможности хранения информации 
		и фотографий пользователей на своих серверах. Иначе пользователи просто 
		не смогут просматривать фотографии и информацию других пользователей.<br><br><br>

		Вот здесь то нам и нужен back-end / server-side код. Вам нужно буде
		написать backend код, для возможности выполнения подобных операций:</p>
		
		<ul  class="text_tt">
			<li>Обрабатывать: кто на кого подписался и кому поставил лайк</li>
			<li>Сжимать фотографии пользователей, чтобы они не занимали слишком много места на ваших серверах</li>
			<li>Рекомендовать пользователям фотографии других пользователей и т. д.</li>
	</ul>

		<p class="text_tt">Проще говоря,
		front-end код нужен для создания 
		дизайна и интерфейса приложения или сайта.
		А back-end код обеспечивает взаимодействие с 
		сервером. В этом и заключается разница между frontend и backend кодом.<br><br>

		Кстати, Python — не единственный
		хороший вариант для написания backend / 
		server-side кода. Есть много других популярных и
		неплохих вариантов, которые вы можете использовать, 
		включая Node.js, который основан на JavaScript.</p>
		
</div><br><br>



<?php require "document/footer7.php" ?>
</body>
</html>