<!Doctype html>
<html>
<head>
	<link rel="stylesheet" type="text/css" href="./css/stylePhp2.css">
	<title>Web-сайт</title>
	<meta charset="UTF-8">
</head>
<body>
<?php require "document/header.php" ?>
<div class="foon">
	<h2>PHP</h2>
		<p class="h2_text">PHP-Скриптовый язык общего назначения, интенсивно применяемый для разработки веб-приложений. В настоящее время поддерживается подавляющим большинством хостинг-провайдеров и является одним из лидеров среди языков, применяющихся для создания динамических веб-сайтов.</p>
	<h3>История языка</h3>
		<p class="h2_text4">	Изначально PHP расшифровывался как 
		Personal Home Page Tools — инструменты для создания
		персональных страниц. Дело в том, что раньше, чтобы сделать 
		функциональный сайт, чаще всего использовали C, Perl и CGI-скрипты. 
		Звучит сложно, на деле — тоже сложно. Единственным способом сделать 
		что-то своё и не изучать при этом три тома по программированию был PHP.<br><br>

			Язык HTML недостаточно гибкий и умеет не так много, как хотелось
			бы. Разработчики PHP решили расширить возможности гипертекста и
			сделали такой язык, который можно встраивать прямо в HTML-код, 
			чтобы они работали вместе. Для этого используют операторы или < ?PHP КАКОЙ-ТО КОД ?> или < ? КАКОЙ-ТО КОД ? >.<br>

			Например, можно сделать так:<br><br>

			< ?PHP $text_part = "этот код написан на PHP?"; //Задаём строковую переменную и сразу наполняем её текстом ? ><br>

			< div > < p > Привет! А вы знаете, что < ?PHP echo $text_part; ?> < /p > < /div ><br><br>

			В результате на странице получится строчка: «Привет! А вы знаете, что этот код написан на PHP?»<br><br>

			Ещё можно создавать целые PHP-файлы и писать 
			весь код там, а потом просто подключать эти файлы
			в нужный момент. Получается, что с PHP можно работать
			в двух режимах: писать код прямо в коде страницы или выносить всё в отдельные файлы.</p>
	
	
	<h3>Зачем нужен PHP</h3>
		<p class="h2_text4">
			Поясним каждое из определений и узнаем, в каких задачах будет полезен PHP.<br><br>

			Основная задача PHP — это «оживление» HTML страниц.<br><br>

			Обычные HTML-страницы статичны. Статичность (или неизменность) означает, что после того, как страницу создали и загрузили на сайт, при каждом обращении к этой странице браузер покажет её любому пользователю в неизменном виде.<br><br>

			Но этого не всегда достаточно.<br><br>

			Почти всегда пользователи приходят на сайт за информацией, которая всё время меняется, и нужно отображать её актуальное состояние. Например:<br><br>

			-показать курс валют;<br><br>
			-подсказать погоду на завтра;<br><br>
			-вывести счётчик посещений страницы.<br><br>
			
			Если использовать только HTML, то решить такие задачи не получится. Здесь-то нам и понадобится PHP. Он принимает входящий запрос от веб-сервера, выполняет сценарий и возвращает веб-серверу результат в виде готового HTML-код. Сервер отправляет этот результат в браузер пользователю, который, в свою очередь, отображает её пользователю. После этого видно свежий курс валют, погоду, и что угодно ещё.<br><br>

			РНР позволяет изменять веб-страницу на сервере непосредственно перед тем, как она будет отправлена браузеру. Давайте разберёмся, как это работает. PHP умеет исполнять код — так называемые сценарии. В ходе исполнения PHP может изменить или динамически создать любой HTML-код, который и является результатом исполнения сценария. Затем сервер отправляет этот код браузеру. При этом браузеру не известно, как была сформирована данная страница — статично сверстана верстальщиком, или динамически создана при участии PHP. Это не важно, т.к. браузер всегда работает только с тем, что получил от сервера.<br><br>

			Давайте запомним, что сценарий — это программа, которая находится на стороне сервера и запускается в ответ на запрос от браузера.<br><br>

			Теперь мы можем понять, почему PHP называют препроцессором гипертекста. Когда браузер запрашивает страницу с адресом, который кончается на .php, веб-сервер обращается к PHP, и просит его выполнить сценарий из файла по этому адресу.<br><br>

			Выполнение сценария также называют его интерпретацией, а сам PHP — интерпретатором.</p><br>
			
	<h3>Где используется PHP</h3>
		<p class="h2_text4">
			Основная сфера применения языка PHP — это веб, то есть сайты, которые мы каждый день посещаем через браузер компьютера или смартфона. Важно 	понимать, что веб — это не весь интернет, а только самая большая и популярная его часть. Кроме веба через интернет работает электронная почта, мессенджеры, файлообменные сервисы, сетевые игры и многое другое.<br><br>

			Практически каждый сайт, который есть в интернете, работает на PHP. Этот язык отлично подходит для любых динамических веб-сайтов, среди которых:<br><br>

			-социальные сети;<br><br>
			-блоги и форумы;<br><br>
			-интернет-магазины;<br><br>
			-браузерные игры.</p>
			
	<h3>Установка и использование</h3>
	
		<p class="h2_text4">На нашем интенсиве мы будем работать с версией PHP 7.1</p>
		
	<h4>Где скачать PHP?</h4>
		<p class="h2_text4">Мы рекомендуем использовать программную сборку OpenServer. После загрузки и установки на вашем компьютере появятся свежая версия PHP, веб-сервер, база данных, и много других программ и инструментов для удобной работы. Подробнее об установке и использовании мы рассказываем на первой лекции.</p>
		
	<h4>Как выглядит PHP-сценарий</h4>
	
		<p class="h2_text4">Типичный PHP-сценарий — это набор выражений. Каждое выражение начинается с новой строчки и заканчивается точкой с запятой.<br><br>

			Выражение — это инструкция, которая приказывает PHP-интерпретатору выполнить одно действие, например, сложить два числа или вывести на экран информацию. Давайте посмотрим на самый простой сценарий. Он будет выводить на экран одну строку: «Привет, Мир!»:</p>
	<img src="./img/4564576.png">
		
		<p class="h2_text4">
			Важно отметить, что любой PHP-сценарий обязательно начинается с такой строки: < ?php - так мы сообщаем веб-серверу, что дальше в файле находится 	код на языке PHP.<br><br>

			В нашем примере сценарий состоит из всего одной инструкции: print("Привет, мир");<br><br>

			Здесь мы просим функцию print вывести на экран наш текст — «Привет, Мир!». Это можно рассматривать как подлежащее и сказуемое в русском языке, где функция print — это сказуемое, а «Привет, Мир!» — подлежащее.<br><br>

			Как мы уже знаем, PHP можно встроить в статичные HTML-файлы и модифицировать их с помощью инструкций. Вот как будет выглядеть тот же пример с выводом текста, но расположенный внутри HTML:</p>
	<img src="./img/634124.png">	
		<p class="h2_text4">Обратите внимание, что в этом примере мы использовали дополнительный фрагмент — ?>. С его помощью мы сообщаем серверу, где заканчивается наш PHP-сценарий. В случае, если наш код последний в документе, и после него ничего не следует, этот фрагмент не обязателен.</p>
	<h3>Почему все ненавидят PHP</h3>
	
		<p class="h2_text4">По старой памяти, когда ужасного 
		кода было много. Простота вхождения в 
		этот язык привела к тому, что невозможно
		было нормально поддерживать сайт, написанный 
		кем-то на PHP. Этот язык позволял раньше (сейчас меньше, но тоже есть)
		много вольностей с типами данных, переменными, обращениями к базе данных,
		поэтому разобраться было почти нереально.<br><br>

			Кроме этого, раньше в PHP было много уязвимостей,
			через которые можно залезть в базы данных пользователей 
			или что-то поломать на сайте. В новых версиях большинство 
			дыр уже устранили, но тогда это стало реальной проблемой.<br><br>

			Смешанный код. Писать в одном файле на PHP и HTML можно, 
			если у вас всего одна форма обратной связи. Но когда весь
			сложный код на PHP расползается по всей странице, то это сильно 
			мешает разобраться, что же там происходит на самом деле.<br><br>

			Любые переменные в любом месте. Понадобилась новая переменная? 
			Объявите её на любом участке кода и сразу берите в работу. 
			Это удобно для первоначальной разработки, когда ты просто 
			берёшь новую переменную там, где она понадобилась, и делаешь
			с ней что хочешь. Но когда проходит время или кто-то другой 
			хочет разобраться в коде, то такой подход сильно затрудняет работу.<br><br>

			Например, можно написать так:<br><br>

$a = 5+3;<br>
$b = "Строка";<br>
… много строк кода …<br>
$a = 17 + $b;<br>
$b = 21;<br><br>

Когда новый программист захочет понять, за что отвечают 
переменные а и b, он найдёт место, где они объявляются,
 и посмотрит, какого они типа и для чего использовались вначале.
 Но разработчик мог в процессе передумать и начать использовать 
 эти переменные для других целей с новыми типами данных. Чтобы это
 понять, нужно просмотреть весь код и разобраться в логике, а это долго и трудно.<br><br>

А ещё:</p>
	<ul class="h2_text4">
		<li>нет нормальной многопоточности;</li>
		<li>мало фреймворков;</li>
		<li>странная работа с объектами и классами;</li>
		<li>нет контроля и отладки ошибок.</li>
	
	</ul>
		
		
</div><br>

<?php require "document/footer.php" ?>
</body>
</html>